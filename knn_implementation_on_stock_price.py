# -*- coding: utf-8 -*-
"""KNN implementation on stock price.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Db7u94dF9n1viy02VkhHexltEuEPp83M
"""

import pandas as pd
 import numpy as np
 import matplotlib.pyplot as plt

!pip install pandas

!pip install quandl

!python --version

!sudo apt-get update
!sudo apt-get install python3.12

!python --version

!sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1

!python --version

!sudo apt-get update
!sudo apt-get install python3.12

!sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1

!python --version

!pip install quandl

import quandl

data = quandl.get("NSE/TATAGLOBAL")
data.head(10)

data.tail(5)

plt.figure(figsize=(15,8))
plt.plot(data['Close'],label='Closing Price')

data['Open - Close'] = data['Open']-data['Close']
data['High - Low']=data['High']- data['Low']
data = data.dropna()

"""Input Features to predict whether customer should buy or sell the stock

"""

x=data[['Open - Close','High - Low']]
x.head()

Y = np.where(data['Close'].shift(-1)>data['Close'],1,-1)

Y

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,Y, test_size=0.25,)

"""Implementation of KNN Classifier

"""

from sklearn import neighbors
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score

#using gridsearch to find the best parameter
params = {'n_neighbors': [2,3,4,5,6,7,8,9,10,11,12,13,14,15]}
knn = neighbors.KNeighborsClassifier()
model= GridSearchCV(knn, params, cv=5)

#fit the model
model.fit(x_train, y_train)

#Accuracy Score
accuracy_train = accuracy_score(y_train, model.predict(x_train))
accuracy_test = accuracy_score(y_test, model.predict(x_test))

print('Train_data Accuracy: %.2f' %accuracy_train)
print('Test_data Accuracy: %.2f' %accuracy_test)

prediction_classification = model.predict(x_test)

actual_prediction_data = pd.DataFrame({'Actual Class':y_test, 'Predicted Class':prediction_classification})

actual_prediction_data

"""Regressiion Problem: KNN"""

y = data['Close']

y

"""Implementation of KNN **Regreession** **bold text**"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn import neighbors

x_train_reg, x_test_reg, y_train_reg, y_test_reg = train_test_split(x, y, test_size=0.25, random_state=44)

#using gridsearch to find the best parameter
para= {'n_neighbors':[2,3,4,5,6,7,8,9,10,11,12,13,14,15]}
Knn_reg = neighbors.KNeighborsRegressor()
model_reg = GridSearchCV(Knn_reg, para, cv=5)

#fit the model and make prediction
model_reg.fit(x_train_reg, y_train_reg)
prediction = model_reg.predict(x_test_reg)

print(prediction)

#rmse
rms=np.sqrt(np.mean(np.power((np.array(y_test)-np.array(prediction)),2)))
rms

valid = pd.DataFrame({'Actual Close': y_test_reg, 'Predicted Close value':prediction})

valid.head(10)